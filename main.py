import asyncio

import aiogram
import qrcode
from io import BytesIO

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

from config import TOKEN

from db_requests import *

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserInfo(StatesGroup):
    username = State()
    info = State()
    contact = State()


# class FileComplaint(StatesGroup):
#     bad_username = State()
#     complaint = State()


def main_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    btn_mylink = types.InlineKeyboardButton("–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")
#    btn_myinfo = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ", callback_data="my_info")
    btn_edit = types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ", callback_data="show_edit")
    btn_sponsor = types.InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ–Ω—Å–æ—Ä–∞—Ö", callback_data="meet_sponsor")
    btn_childinfo = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–∏–∫–æ–≤", callback_data="child_info")
    btn_stop = types.InlineKeyboardButton("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞", callback_data="good_luck")
    btn_rules = types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="show_rules")
#    btn_complaint = types.InlineKeyboardButton("–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data="to_complaint")
    kb.add(btn_mylink, btn_edit, btn_sponsor, btn_childinfo, btn_stop, btn_rules)
    return kb


@dp.callback_query_handler(text="ref_link")
async def process_callback_ref_link(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    text = "https://t.me/onestepone_bot?start={}".format(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "_–≠—Ç–æ –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:_\n", parse_mode="Markdown")
    await bot.send_message(callback_query.from_user.id, text, disable_web_page_preview = True)
    await bot.send_message(callback_query.from_user.id, "_–¢—É—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å)\nüëá:_\n", parse_mode="Markdown")
    await bot.send_message(callback_query.from_user.id, "(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É –ø–æ –±–∏–∑–Ω–µ—Å—É)\nüì¢ \n–ü—Ä–∏–≤–µ—Ç—Å—Ç—Å–≤—É—é! –ù–µ–¥–∞–≤–Ω–æ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏, –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–æ–≤—ã—Ö –±–∏–∑–Ω–µ—Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º.\n–¢—É—Ç –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è - https://youtu.be/03Z57SRs3bk. \n–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ - "+ text, disable_web_page_preview = True)
    await bot.send_message(callback_query.from_user.id, "(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥—Ä—É–≥—É-—Å–µ—Ç–µ–≤–∏–∫—É)\nüì¢ \n–ü—Ä–∏–≤–µ—Ç! –°–æ–≤–µ—Ç—É—é –Ω–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ –±–∏–∑–Ω–µ—Å.\n–¢—É—Ç –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è - https://youtu.be/03Z57SRs3bk \n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ - " + text, disable_web_page_preview=True)
    await bot.send_message(callback_query.from_user.id, "(—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, —Ç—É—Ç –Ω–∞–π–¥–µ—Ç–µ –¥–ª—è –Ω–∏—Ö –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ - https://joinme-leader.wixsite.com/oso-foto) \nüì¢\n–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n–í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞—Å–∫–∞—á–∫–∏ –±–ª–æ–≥–æ–≤, youtube/telegram –∫–∞–Ω–∞–ª–æ–≤, —Ä–µ–∫–ª–∞–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ —Ç.–ø.\n–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ - "+text+"\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é -  https://youtu.be/03Z57SRs3bk", disable_web_page_preview=True)
    # –ü–æ–∫–∞ –±–ª–æ–∫–∏—Ä—É—é –≤—ã–≤–æ–¥ qrcode, —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤—ã–≤–æ–∂—É –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π‚òù
    # ref_link_qr = qrcode.make(text)
    # buffered = BytesIO()
    # ref_link_qr.save(buffered, format="PNG")
    # await bot.send_message(callback_query.from_user.id, "_–ê —ç—Ç–æ QR –∫–æ–¥ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:_\n", parse_mode="Markdown")
    # await bot.send_photo(callback_query.from_user.id, buffered.getvalue())
    # buffered.close()
    last_action(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "_–ß–µ–º –±–æ–ª—å—à–µ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π —É–≤–∏–¥—è—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–π –±–æ—Ç –±—É–¥–µ—Ç –¥–ª—è –≤–∞—Å._", reply_markup=main_menu(), parse_mode="Markdown")

#   –∫–Ω–æ–ø–∫—É —É–±—Ä–∞–ª–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@dp.callback_query_handler(text="my_info")
async def process_callback_show_my_info(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    current_user = get_user(callback_query.from_user.id)
    if current_user["description"] == "":
        await bot.send_message(callback_query.from_user.id, "_–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ._", parse_mode="Markdown")
    else:
        text = ""
        warning = ""
        if current_user["username"] == "":
            warning += "–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
        else:
            text += "@" + current_user["username"] + "\n"
        text += current_user["description"] + "\n"
        # if current_user["contact"] == "":
        #     warning += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –í–∞–º–∏.\n"
        # else:
        #     text += current_user["contact"]
        text += current_user["contact"]
        await bot.send_message(callback_query.from_user.id, text)
        if warning != "":
            await bot.send_message(callback_query.from_user.id, warning)
    last_action(callback_query.from_user.id)


@dp.callback_query_handler(text="show_edit")
async def process_callback_show_and_edit(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    current_user = get_user(callback_query.from_user.id)
    if current_user["description"] == "":
        button_fill = types.InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="edit_info")
        inline_kb = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button_fill)
        await bot.send_message(callback_query.from_user.id, "_–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ._", reply_markup=inline_kb, parse_mode="Markdown")
    else:
        await bot.send_message(callback_query.from_user.id, "_–í–æ—Ç —á—Ç–æ –≤—ã —Ä–∞–Ω–µ–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –æ —Å–µ–±–µ:_", parse_mode="Markdown")
        button_yes = types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_info")
        button_no = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="no_action")
        inline_kb = types.InlineKeyboardMarkup(row_width=2).row(button_yes, button_no)
        await bot.send_message(callback_query.from_user.id, current_user["description"], reply_markup=inline_kb)
    last_action(callback_query.from_user.id)


@dp.callback_query_handler(text="no_action")
async def process_callback_return_to_main(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "_–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ._", reply_markup=main_menu(), parse_mode="Markdown")


@dp.callback_query_handler(text="edit_info")
async def process_callback_edit_my_info(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    current_user = get_user(callback_query.from_user.id)
    if "username" not in callback_query.from_user:
        button_done = types.KeyboardButton("–ì–æ—Ç–æ–≤–æ!")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add(button_done)
        await bot.send_message(callback_query.from_user.id,
                               "_–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –≤–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å!_",
                               reply_markup=kb, parse_mode="Markdown")
        await UserInfo.username.set()
    else:
        if current_user["username"] != callback_query.from_user["username"]:
            update_info(callback_query.from_user.id, "username", callback_query.from_user["username"])
        await bot.send_message(callback_query.from_user.id, "_–û–ø–∏—à–∏—Ç–µ, —á–µ–º –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã –¥—Ä—É–≥–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞–º _", parse_mode="Markdown")
        await bot.send_message(callback_query.from_user.id, "üëá")
        await UserInfo.info.set()
    last_action(callback_query.from_user.id)


@dp.message_handler(state=UserInfo.username)
async def username_check(message: types.Message, state: FSMContext):
    if "username" not in message.from_user:
        await message.answer("_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –µ—â—ë —Ä–∞–∑. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–∏–¥ @username_", parse_mode="Markdown")
    else:
        update_info(message.from_user.id, "username", message.from_user["username"])
        await message.answer("_–°–ø–∞—Å–∏–±–æ!\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á–µ–º –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã –¥—Ä—É–≥–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞–º:_",
                             reply_markup=types.ReplyKeyboardRemove(), parse_mode="Markdown")
        await UserInfo.info.set()
    last_action(message.from_user.id)


@dp.message_handler(state=UserInfo.info)
async def getting_my_info(message: types.Message, state: FSMContext):
    if len(message.text) < 10:
        await message.answer("_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ..._", parse_mode="Markdown")
    else:
        update_info(message.from_user.id, "description", message.text)
        await message.answer("üëç")
        text = "*–û–¢–õ–ò–ß–ù–û!*üí™üí™üí™_\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—èüì¢ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n _*üéØ–í–∞—à–∞ –∑–∞–¥–∞—á–∞, —Ä–∞–∑–¥–∞—Ç—å –¥—Ä—É–∑—å—è–º —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É*__"
        await state.finish()
        # current_user = get_user(message.from_user.id)
        # if current_user["contact"] == "":
        #     text += "–û—Å—Ç–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, e-mail, –≤–∞—à —Å–∞–π—Ç, —Å–æ—Ü—Å–µ—Ç–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä):"
        #     await UserInfo.contact.set()
        await message.answer(text, reply_markup=main_menu(), parse_mode="Markdown")
    last_action(message.from_user.id)


@dp.callback_query_handler(text="child_info")
async def process_callback_show_child_info(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "_–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —É —Å–µ—Ä–≤–µ—Ä–∞..._", parse_mode="Markdown")
    await bot.answer_callback_query(callback_query.id)
    current_user = get_user(callback_query.from_user.id)
    childs = get_childs(current_user["ID_user"])
    text = "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ {} —Ä–∞–∑.".format(count_child(callback_query.from_user.id))
    if len(childs) != 0:
        text += "\n–í—ã–≤–æ–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö:"
    await bot.send_message(callback_query.from_user.id, "_"+text+"_", parse_mode="Markdown")
    for user in childs:
        current_user = get_user(user)
        text = "@" + current_user["username"] + "\n" + current_user["description"] + "\n" + current_user["contact"]
        await bot.send_message(callback_query.from_user.id, text, disable_web_page_preview = True)
    last_action(callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id, "_‚òù —Ç—É—Ç —Ç–æ—á–Ω–æ –Ω–µ –≤—Å–µ –≤–∞—à–∏ –¥—Ä—É–∑—å—è._", reply_markup=main_menu(), parse_mode="Markdown")

@dp.callback_query_handler(text="show_rules")
async def process_callback_show_rules(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "_"+get_text("RULES")+"_", reply_markup=main_menu(), parse_mode="Markdown", disable_web_page_preview = True)
    last_action(callback_query.from_user.id)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    command = message.text.split()
    current_user = get_user(message.from_user.id)
    if current_user is None or current_user["status"] == 4:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if len(command) < 2:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            if current_user is None:
                insert_user(message.from_user, 0, 4)
            await message.answer("_–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏, –∫—Ç–æ –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n" + get_text("NOT_WELCOME")+"_", parse_mode="Markdown")
        else:
            sponsor = get_user(command[1])
            if sponsor is not None and sponsor["status"] != 4:  # —Å–ø–æ–Ω—Å–æ—Ä –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                if current_user is not None:
                    delete_user(message.from_user.id)
                insert_user(message.from_user, command[1], 3)
                text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, _*{}!*_üòâ\n–í—ã –∑–¥–µ—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é _*{}*_.\n".format(message.from_user.first_name, sponsor["first_name"])
                text += get_text("WELCOME")
                button_meet = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="meet_sponsor")
                inline_kb = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button_meet)
                await message.answer("_"+text+"_", reply_markup=inline_kb, parse_mode="Markdown", disable_web_page_preview = True)
                if sponsor["status"] == 1:
                    await bot.send_message(sponsor["ID_user"], "üëç _–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–£ –≤–∞—Å –Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ _*OSO* \n_ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª(–∞)->_* @" + message.from_user.username+"*", parse_mode="Markdown")
            else:
                if current_user is None:
                    insert_user(message.from_user, 0, 4)
                await message.answer("_–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n" + get_text("NOT_WELCOME")+"_", parse_mode="Markdown")
    elif current_user["status"] == 0:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ —Ä–∞–Ω–µ–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª —É—á–∞—Å—Ç–∏–µ
        button_yes = types.InlineKeyboardButton("–î–∞", callback_data="activate")
        button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="good_luck")
        inline_kb = types.InlineKeyboardMarkup(row_width=2).row(button_yes, button_no)
        await message.answer(f"_–ü—Ä–∏–≤–µ—Ç,_* {current_user['first_name']}*_!\n–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞?_", reply_markup=inline_kb, parse_mode="Markdown")
    elif current_user["status"] == 1:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω
        await message.answer(f"_–ü—Ä–∏–≤–µ—Ç,_* {current_user['first_name']}*_!\n–ö–∞–∫ –¥–µ–ª–∞?_", reply_markup=main_menu(), parse_mode="Markdown")
    elif current_user["status"] == 2:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –∂–∞–ª–æ–±–µ
        await message.answer(f"_–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –∂–∞–ª–æ–± —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤._", parse_mode="Markdown")
    elif current_user["status"] == 3:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏
        button_go = types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥!", callback_data="meet_sponsor")
        inline_kb = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button_go)
        await message.answer(f"_–ü—Ä–∏–≤–µ—Ç,_* {current_user['first_name']}*_!\n–ì–æ—Ç–æ–≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏?_", reply_markup=inline_kb, parse_mode="Markdown")
    else:
        await message.answer(f"_–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∑–¥–Ω–µ–µ._", parse_mode="Markdown")
    last_action(message.from_user.id)


@dp.callback_query_handler(text="good_luck")
async def process_callback_activate_user(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "_–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!\n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –±—É–¥—É—é—â–µ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.\n–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ_ /start", parse_mode="Markdown")
    change_status(callback_query.from_user.id, 0)
    last_action(callback_query.from_user.id)


@dp.callback_query_handler(text="activate")
async def process_callback_activate_user(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "_–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!_", reply_markup=main_menu(), parse_mode="Markdown")
    change_status(callback_query.from_user.id, 1)
    last_action(callback_query.from_user.id)


@dp.callback_query_handler(text="meet_sponsor")
async def process_callback_start_meeting(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "_–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —É —Å–µ—Ä–≤–µ—Ä–∞..._", parse_mode="Markdown")
    await meet_sponsor(callback_query.from_user.id)
    last_action(callback_query.from_user.id)


async def meet_sponsor(user_id):
    depth = get_text("depth")
    current_user = get_user(user_id)
    status = current_user["status"]
    n = 0
    while n < depth:
        if current_user["ID_sponsor"] == 0:
            break
        current_user = get_user(current_user["ID_sponsor"])
        if current_user["status"] == 1 and current_user["description"] != "":
            text = "@" + current_user["username"] + "\n" + current_user["description"] + "\n" + current_user["contact"]
            await bot.send_message(user_id, text, disable_web_page_preview = True)
            n += 1
    if status == 1:
        await bot.send_message(user_id, "_–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏, —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è, —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å_", reply_markup=main_menu(), parse_mode="Markdown")
    if status == 3:
        button_fill = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ —Å–µ–±–µ", callback_data="edit_info")
        inline_kb = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button_fill)
        await bot.send_message(user_id, "‚òù")
        await bot.send_message(user_id, "*–ù–∞—á–Ω–µ–º*üòâüòâ\n\n_ü§ù–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∂–¥–æ–º—É –∏–∑ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n ‚ùó –í–Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ -_ *OSO*, _—ç—Ç–æ –¥–∞—Å—Ç –∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–∏—Å—å–º–æ –ø—Ä–∏—à–ª–æ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç –∫  –¥–∏–∞–ª–æ–≥—É.üòâ\n\n‚≠ê–û–Ω–∏ –≤—Å–µ –∂–¥—É—Ç –æ—Ç –≤–∞—Å –ø–∏—Å—å–º–∞!‚≠ê \n\n_*–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º —Å–ø–æ–Ω—Å–æ—Ä–∞–º, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.*__", reply_markup=inline_kb, parse_mode="Markdown")
        change_status(user_id, 1)  # –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏, –µ–≥–æ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    last_action(user_id)


@dp.message_handler(commands=['all'])
async def send_to_all(message: types.Message):
    admin = get_text("ADMIN").lower()
    if message.from_user.username != admin:
        await message.answer("_–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç–æ—Ä–∞ OSO!_", parse_mode="Markdown")
    else:
        command = message.text.split(maxsplit=1)
        new_message = "_–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ OSO:_\n" + command[1]
        users_list = get_all_id()
        count = 0
        bad = 0
        for user in users_list:
            try:
                await bot.send_message(user, new_message, disable_web_page_preview=True)
                await asyncio.sleep(0.1)
                count += 1
            except (aiogram.utils.exceptions.ChatNotFound, aiogram.utils.exceptions.BotBlocked):
                bad += 1
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–æ –±—ã–ª–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º OSO.\n–£ {bad} —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª—ë–Ω —á–∞—Ç —Å –±–æ—Ç–æ–º.")


#   –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –ø–æ–ø–∞–≤—à–∏–π –≤ —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã—à–µ
# @dp.message_handler()
# async def echo(message: types.Message):
#     await message.answer(message.text)


#   –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=types.ContentType.ANY)
async def unknown_message(message: types.Message):
    if not message.from_user.is_bot:
        await message.answer("_–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å_ \n/start.", parse_mode="Markdown")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)